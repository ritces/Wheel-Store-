generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model part_options {
  id                     Int                      @id @default(autoincrement())
  part_id                Int
  name                   String
  is_available           Boolean                  @default(false)
  price                  Decimal                  @db.Decimal(10, 2)
  part                   parts                    @relation(fields: [part_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pricing_conditions     pricing_conditions[]
  restriction_conditions restriction_conditions[]
}

model parts {
  id           Int         @id @default(autoincrement())
  product_id   Int
  name         String
  product      products     @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  part_options part_options[]
}

model pricing_conditions {
  id             Int        @id @default(autoincrement())
  rule_id        Int
  part_option_id Int
  part_option    part_options  @relation(fields: [part_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "conditional_pricing_conditions_part_option_id_fkey")
  pricing_rule   pricing_rules @relation(fields: [rule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "conditional_pricing_conditions_rule_id_fkey")
}

model pricing_rules {
  id                 Int                  @id @default(autoincrement())
  description        String?
  additional_price   Decimal              @db.Decimal(10, 2)
  pricing_conditions pricing_conditions[]
}

model products {
  id                     Int                    @id @default(autoincrement())
  name                   String
  description            String?
  price                  Decimal                  @db.Decimal(10, 2)
  type                   String                   @unique
  stock_quantity         Int
  image_path             String?
  parts                  parts[]
}

model restriction_conditions {
  id                Int            @id @default(autoincrement())
  rule_id           Int 
  part_option_id    Int
  part_option       part_options      @relation(fields: [part_option_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prohibited_combinations_conditions_part_option_id_fkey")
  restriction_rule  restriction_rules @relation(fields: [rule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prohibited_combinations_conditions_rule_id_fkey")
}

model restriction_rules {
  id                     Int                   @id @default(autoincrement())
  description            String?
  restriction_conditions restriction_conditions[]
}